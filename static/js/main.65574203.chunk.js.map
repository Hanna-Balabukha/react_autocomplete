{"version":3,"sources":["components/PostPeople/PostPeople.tsx","components/PostList/PostList.tsx","data/people.ts","App.tsx","index.tsx"],"names":["PostPeople","person","selectedPerson","className","type","onClick","name","PostList","React","memo","people","selectedBody","map","slug","length","peopleFromServer","sex","born","died","fatherName","motherName","getPreparedPeople","appliedQuery","preparedPosts","filter","toLowerCase","includes","App","useState","targetValue","setTargetValue","setSelectedPerson","setAppliedQuery","isListVisible","setIsListVisible","applyQuery","useCallback","callback","delay","timerId","args","window","clearTimeout","setTimeout","debounce","title","visiblePeople","required","placeholder","value","onChange","event","target","onFocus","role","curPerson","find","body","ReactDOM","render","document","getElementById"],"mappings":"8NAOaA,EAA6B,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,eACnD,OACE,qBAAKC,UAAU,gBAAf,SACE,wBACEC,KAAK,SACLD,UAAU,gBACVE,QAAS,WACPH,EAAeD,EAChB,EALH,SAOGA,EAAOK,QAIf,ECZYC,EAA2BC,IAAMC,MAAK,YAG5C,IAFLC,EAEI,EAFJA,OAEI,IADJC,oBACI,MADW,WAAQ,EACnB,EACJ,OACE,sBAAKR,UAAU,mBAAf,UACGO,EAAOE,KAAI,SAACX,GAAD,OACV,cAAC,EAAD,CACEA,OAAQA,EAERC,eAAgBS,GADXV,EAAOY,KAHJ,KAOVH,EAAOI,QACN,0DAGR,ICxBYC,EAA6B,CACxC,CACET,KAAM,oBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,kBACZC,WAAY,oBACZP,KAAM,0BAER,CACEP,KAAM,mBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,qBACZC,WAAY,mBACZP,KAAM,yBAER,CACEP,KAAM,iBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,oBACZC,WAAY,2BACZP,KAAM,uBAER,CACEP,KAAM,kBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,sBACZC,WAAY,oBACZP,KAAM,wBAER,CACEP,KAAM,sBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,kBACZC,WAAY,mBACZP,KAAM,4BAER,CACEP,KAAM,wBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,gCACZC,WAAY,KACZP,KAAM,8BAER,CACEP,KAAM,wBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,mBACZC,WAAY,KACZP,KAAM,8BAER,CACEP,KAAM,kBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,kBACZC,WAAY,gBACZP,KAAM,wBAER,CACEP,KAAM,kBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,oBACZC,WAAY,cACZP,KAAM,wBAER,CACEP,KAAM,wBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,uBACZC,WAAY,eACZP,KAAM,8BAER,CACEP,KAAM,mBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,uBACZC,WAAY,KACZP,KAAM,yBAER,CACEP,KAAM,mBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,mBACZC,WAAY,iBACZP,KAAM,yBAER,CACEP,KAAM,2BACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,mBACZC,WAAY,qBACZP,KAAM,iCAER,CACEP,KAAM,uBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,wBACZC,WAAY,gBACZP,KAAM,6BAER,CACEP,KAAM,wBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,2BACZC,WAAY,KACZP,KAAM,8BAER,CACEP,KAAM,mBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,mBACZC,WAAY,mBACZP,KAAM,yBAER,CACEP,KAAM,0BACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,yBACZC,WAAY,uBACZP,KAAM,gCAER,CACEP,KAAM,oBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,wBACZC,WAAY,wBACZP,KAAM,0BAER,CACEP,KAAM,mBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,2BACZC,WAAY,mBACZP,KAAM,yBAER,CACEP,KAAM,sBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,gBACZC,WAAY,iBACZP,KAAM,4BAER,CACEP,KAAM,gBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,KACZC,WAAY,KACZP,KAAM,sBAER,CACEP,KAAM,2BACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,wBACZC,WAAY,mBACZP,KAAM,iCAER,CACEP,KAAM,iBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,iBACZC,WAAY,mBACZP,KAAM,uBAER,CACEP,KAAM,mBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,iBACZC,WAAY,2BACZP,KAAM,yBAER,CACEP,KAAM,iBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,kBACZC,WAAY,qBACZP,KAAM,uBAER,CACEP,KAAM,mBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,mBACZC,WAAY,mBACZP,KAAM,yBAER,CACEP,KAAM,mBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,mBACZC,WAAY,iBACZP,KAAM,yBAER,CACEP,KAAM,kBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,kBACZC,WAAY,qBACZP,KAAM,wBAER,CACEP,KAAM,yBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,2BACZC,WAAY,mBACZP,KAAM,+BAER,CACEP,KAAM,kBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,kBACZC,WAAY,mBACZP,KAAM,wBAER,CACEP,KAAM,uBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,mBACZC,WAAY,mBACZP,KAAM,6BAER,CACEP,KAAM,iBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,cACZC,WAAY,iBACZP,KAAM,uBAER,CACEP,KAAM,sBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,gBACZC,WAAY,iBACZP,KAAM,4BAER,CACEP,KAAM,kBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,0BACZC,WAAY,iBACZP,KAAM,wBAER,CACEP,KAAM,mBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,gBACZC,WAAY,wBACZP,KAAM,yBAER,CACEP,KAAM,gBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,mBACZC,WAAY,mBACZP,KAAM,sBAER,CACEP,KAAM,iBACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,uBACZC,WAAY,uBACZP,KAAM,uBAER,CACEP,KAAM,cACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,gBACZC,WAAY,oBACZP,KAAM,oBAER,CACEP,KAAM,gCACNU,IAAK,IACLC,KAAM,KACNC,KAAM,KACNC,WAAY,kBACZC,WAAY,sBACZP,KAAM,uCC1UV,SAASQ,EACPX,EADF,GAKG,IAFCY,EAEF,EAFEA,aAGEC,EAAa,YAAOb,GAMxB,OAFAa,EAAgBA,EAAcC,QAAO,SAAAvB,GAAM,OAASA,EAAOK,KAFvBmB,cAAcC,SAASJ,EAEhB,GAG5C,CAEM,IAAMK,EAAgB,WAC3B,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA4CF,mBAAwB,MAApE,mBAAO1B,EAAP,KAAuB6B,EAAvB,KACA,EAAwCH,mBAAS,IAAjD,mBAAON,EAAP,KAAqBU,EAArB,KACA,EAA0CJ,oBAAS,GAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KAEMC,EAAaC,sBApCrB,SAAkBC,EAAeC,GAC/B,IAAIC,EAAU,EAEd,OAAO,WAAmB,IAAD,uBAAdC,EAAc,yBAAdA,EAAc,gBACvBC,OAAOC,aAAaH,GACpBA,EAAUE,OAAOE,YAAW,WAC1BN,EAAQ,WAAR,EAAYG,EACb,GAAEF,EACJ,CACF,CA4BGM,CAASZ,EAAiB,KAC1B,IAGIa,EAAQ3C,EAAc,UACrBA,EAAeI,KADM,aACGJ,EAAee,KADlB,cAC4Bf,EAAegB,KAD3C,KAExB,qBAgBE4B,EAAgBxB,EAClBD,EAAkBN,EAAkB,CAAEO,iBACtCP,EAEJ,OACE,uBAAMZ,UAAU,UAAhB,UACE,oBAAIA,UAAU,QAAd,SACG0C,IAGH,sBAAK1C,UAAU,qBAAf,UACE,qBAAKA,UAAU,mBAAf,SACE,uBACEC,KAAK,OACL2C,UAAQ,EACRC,YAAY,2BACZ7C,UAAU,QACV8C,MAAOpB,EACPqB,SAAU,SAAAC,GAAK,OAvBRF,EAuBoBE,EAAMC,OAAOH,MAtBhDnB,EAAemB,QACfd,EAAWc,EAAMxB,eAFH,IAACwB,CAuBQ,EACfI,QAAS,kBAAMnB,GAAiB,EAAvB,MAIb,qBAAK/B,UAAU,gBAAgBmD,KAAK,OAApC,SACGrB,GACI,cAAC1B,EAAD,CAAUG,OAAQoC,EAAenC,aAvC3B,SAACV,GAClB,IAAMsD,EAAYxC,EAAiByC,MAAK,SAAAC,GAAI,OAAIA,EAAKnD,OAASL,EAAOK,IAAzB,KACzC,KAEHwB,GAAwB,OAATyB,QAAS,IAATA,OAAA,EAAAA,EAAWjD,OAAQ,IAClCyB,EAAkBwB,GAClBrB,GAAiB,EAClB,WAqCF,EC5FDwB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,Q","file":"static/js/main.65574203.chunk.js","sourcesContent":["import { Person } from '../../types/Person';\n\ntype Props = {\n  person: Person;\n  selectedPerson: (person: Person) => Person | void;\n};\n\nexport const PostPeople:React.FC<Props> = ({ person, selectedPerson }) => {\n  return (\n    <div className=\"dropdown-item\">\n      <button\n        type=\"button\"\n        className=\"has-text-link\"\n        onClick={() => {\n          selectedPerson(person);\n        }}\n      >\n        {person.name}\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Person } from '../../types/Person';\nimport { PostPeople } from '../PostPeople';\n\ntype Props = {\n  people: Person[];\n  selectedBody: (person: Person) => Person | void;\n};\n\nexport const PostList:React.FC<Props> = React.memo(({\n  people,\n  selectedBody = () => {},\n}) => {\n  return (\n    <div className=\"dropdown-content\">\n      {people.map((person) => (\n        <PostPeople\n          person={person}\n          key={person.slug}\n          selectedPerson={selectedBody}\n        />\n      ))}\n      {!people.length\n      && <p>No matching suggestions</p>}\n    </div>\n  );\n});\n","import { Person } from '../types/Person';\n\nexport const peopleFromServer: Person[] = [\n  {\n    name: 'Carolus Haverbeke',\n    sex: 'm',\n    born: 1832,\n    died: 1905,\n    fatherName: 'Carel Haverbeke',\n    motherName: 'Maria van Brussel',\n    slug: 'carolus-haverbeke-1832',\n  },\n  {\n    name: 'Emma de Milliano',\n    sex: 'f',\n    born: 1876,\n    died: 1956,\n    fatherName: 'Petrus de Milliano',\n    motherName: 'Sophia van Damme',\n    slug: 'emma-de-milliano-1876',\n  },\n  {\n    name: 'Maria de Rycke',\n    sex: 'f',\n    born: 1683,\n    died: 1724,\n    fatherName: 'Frederik de Rycke',\n    motherName: 'Laurentia van Vlaenderen',\n    slug: 'maria-de-rycke-1683',\n  },\n  {\n    name: 'Jan van Brussel',\n    sex: 'm',\n    born: 1714,\n    died: 1748,\n    fatherName: 'Jacobus van Brussel',\n    motherName: 'Joanna van Rooten',\n    slug: 'jan-van-brussel-1714',\n  },\n  {\n    name: 'Philibert Haverbeke',\n    sex: 'm',\n    born: 1907,\n    died: 1997,\n    fatherName: 'Emile Haverbeke',\n    motherName: 'Emma de Milliano',\n    slug: 'philibert-haverbeke-1907',\n  },\n  {\n    name: 'Jan Frans van Brussel',\n    sex: 'm',\n    born: 1761,\n    died: 1833,\n    fatherName: 'Jacobus Bernardus van Brussel',\n    motherName: null,\n    slug: 'jan-frans-van-brussel-1761',\n  },\n  {\n    name: 'Pauwels van Haverbeke',\n    sex: 'm',\n    born: 1535,\n    died: 1582,\n    fatherName: 'N. van Haverbeke',\n    motherName: null,\n    slug: 'pauwels-van-haverbeke-1535',\n  },\n  {\n    name: 'Clara Aernoudts',\n    sex: 'f',\n    born: 1918,\n    died: 2012,\n    fatherName: 'Henry Aernoudts',\n    motherName: 'Sidonie Coene',\n    slug: 'clara-aernoudts-1918',\n  },\n  {\n    name: 'Emile Haverbeke',\n    sex: 'm',\n    born: 1877,\n    died: 1968,\n    fatherName: 'Carolus Haverbeke',\n    motherName: 'Maria Sturm',\n    slug: 'emile-haverbeke-1877',\n  },\n  {\n    name: 'Lieven de Causmaecker',\n    sex: 'm',\n    born: 1696,\n    died: 1724,\n    fatherName: 'Carel de Causmaecker',\n    motherName: 'Joanna Claes',\n    slug: 'lieven-de-causmaecker-1696',\n  },\n  {\n    name: 'Pieter Haverbeke',\n    sex: 'm',\n    born: 1602,\n    died: 1642,\n    fatherName: 'Lieven van Haverbeke',\n    motherName: null,\n    slug: 'pieter-haverbeke-1602',\n  },\n  {\n    name: 'Livina Haverbeke',\n    sex: 'f',\n    born: 1692,\n    died: 1743,\n    fatherName: 'Daniel Haverbeke',\n    motherName: 'Joanna de Pape',\n    slug: 'livina-haverbeke-1692',\n  },\n  {\n    name: 'Pieter Bernard Haverbeke',\n    sex: 'm',\n    born: 1695,\n    died: 1762,\n    fatherName: 'Willem Haverbeke',\n    motherName: 'Petronella Wauters',\n    slug: 'pieter-bernard-haverbeke-1695',\n  },\n  {\n    name: 'Lieven van Haverbeke',\n    sex: 'm',\n    born: 1570,\n    died: 1636,\n    fatherName: 'Pauwels van Haverbeke',\n    motherName: 'Lievijne Jans',\n    slug: 'lieven-van-haverbeke-1570',\n  },\n  {\n    name: 'Joanna de Causmaecker',\n    sex: 'f',\n    born: 1762,\n    died: 1807,\n    fatherName: 'Bernardus de Causmaecker',\n    motherName: null,\n    slug: 'joanna-de-causmaecker-1762',\n  },\n  {\n    name: 'Willem Haverbeke',\n    sex: 'm',\n    born: 1668,\n    died: 1731,\n    fatherName: 'Lieven Haverbeke',\n    motherName: 'Elisabeth Hercke',\n    slug: 'willem-haverbeke-1668',\n  },\n  {\n    name: 'Pieter Antone Haverbeke',\n    sex: 'm',\n    born: 1753,\n    died: 1798,\n    fatherName: 'Jan Francies Haverbeke',\n    motherName: 'Petronella de Decker',\n    slug: 'pieter-antone-haverbeke-1753',\n  },\n  {\n    name: 'Maria van Brussel',\n    sex: 'f',\n    born: 1801,\n    died: 1834,\n    fatherName: 'Jan Frans van Brussel',\n    motherName: 'Joanna de Causmaecker',\n    slug: 'maria-van-brussel-1801',\n  },\n  {\n    name: 'Angela Haverbeke',\n    sex: 'f',\n    born: 1728,\n    died: 1734,\n    fatherName: 'Pieter Bernard Haverbeke',\n    motherName: 'Livina de Vrieze',\n    slug: 'angela-haverbeke-1728',\n  },\n  {\n    name: 'Elisabeth Haverbeke',\n    sex: 'f',\n    born: 1711,\n    died: 1754,\n    fatherName: 'Jan Haverbeke',\n    motherName: 'Maria de Rycke',\n    slug: 'elisabeth-haverbeke-1711',\n  },\n  {\n    name: 'Lievijne Jans',\n    sex: 'f',\n    born: 1542,\n    died: 1582,\n    fatherName: null,\n    motherName: null,\n    slug: 'lievijne-jans-1542',\n  },\n  {\n    name: 'Bernardus de Causmaecker',\n    sex: 'm',\n    born: 1721,\n    died: 1789,\n    fatherName: 'Lieven de Causmaecker',\n    motherName: 'Livina Haverbeke',\n    slug: 'bernardus-de-causmaecker-1721',\n  },\n  {\n    name: 'Jacoba Lammens',\n    sex: 'f',\n    born: 1699,\n    died: 1740,\n    fatherName: 'Lieven Lammens',\n    motherName: 'Livina de Vrieze',\n    slug: 'jacoba-lammens-1699',\n  },\n  {\n    name: 'Pieter de Decker',\n    sex: 'm',\n    born: 1705,\n    died: 1780,\n    fatherName: 'Joos de Decker',\n    motherName: 'Petronella van de Steene',\n    slug: 'pieter-de-decker-1705',\n  },\n  {\n    name: 'Joanna de Pape',\n    sex: 'f',\n    born: 1654,\n    died: 1723,\n    fatherName: 'Vincent de Pape',\n    motherName: 'Petronella Wauters',\n    slug: 'joanna-de-pape-1654',\n  },\n  {\n    name: 'Daniel Haverbeke',\n    sex: 'm',\n    born: 1652,\n    died: 1723,\n    fatherName: 'Lieven Haverbeke',\n    motherName: 'Elisabeth Hercke',\n    slug: 'daniel-haverbeke-1652',\n  },\n  {\n    name: 'Lieven Haverbeke',\n    sex: 'm',\n    born: 1631,\n    died: 1676,\n    fatherName: 'Pieter Haverbeke',\n    motherName: 'Anna van Hecke',\n    slug: 'lieven-haverbeke-1631',\n  },\n  {\n    name: 'Martina de Pape',\n    sex: 'f',\n    born: 1666,\n    died: 1727,\n    fatherName: 'Vincent de Pape',\n    motherName: 'Petronella Wauters',\n    slug: 'martina-de-pape-1666',\n  },\n  {\n    name: 'Jan Francies Haverbeke',\n    sex: 'm',\n    born: 1725,\n    died: 1779,\n    fatherName: 'Pieter Bernard Haverbeke',\n    motherName: 'Livina de Vrieze',\n    slug: 'jan-francies-haverbeke-1725',\n  },\n  {\n    name: 'Maria Haverbeke',\n    sex: 'm',\n    born: 1905,\n    died: 1997,\n    fatherName: 'Emile Haverbeke',\n    motherName: 'Emma de Milliano',\n    slug: 'maria-haverbeke-1905',\n  },\n  {\n    name: 'Petronella de Decker',\n    sex: 'f',\n    born: 1731,\n    died: 1781,\n    fatherName: 'Pieter de Decker',\n    motherName: 'Livina Haverbeke',\n    slug: 'petronella-de-decker-1731',\n  },\n  {\n    name: 'Livina Sierens',\n    sex: 'f',\n    born: 1761,\n    died: 1826,\n    fatherName: 'Jan Sierens',\n    motherName: 'Maria van Waes',\n    slug: 'livina-sierens-1761',\n  },\n  {\n    name: 'Laurentia Haverbeke',\n    sex: 'f',\n    born: 1710,\n    died: 1786,\n    fatherName: 'Jan Haverbeke',\n    motherName: 'Maria de Rycke',\n    slug: 'laurentia-haverbeke-1710',\n  },\n  {\n    name: 'Carel Haverbeke',\n    sex: 'm',\n    born: 1796,\n    died: 1837,\n    fatherName: 'Pieter Antone Haverbeke',\n    motherName: 'Livina Sierens',\n    slug: 'carel-haverbeke-1796',\n  },\n  {\n    name: 'Elisabeth Hercke',\n    sex: 'f',\n    born: 1632,\n    died: 1674,\n    fatherName: 'Willem Hercke',\n    motherName: 'Margriet de Brabander',\n    slug: 'elisabeth-hercke-1632',\n  },\n  {\n    name: 'Jan Haverbeke',\n    sex: 'm',\n    born: 1671,\n    died: 1731,\n    fatherName: 'Lieven Haverbeke',\n    motherName: 'Elisabeth Hercke',\n    slug: 'jan-haverbeke-1671',\n  },\n  {\n    name: 'Anna van Hecke',\n    sex: 'f',\n    born: 1607,\n    died: 1670,\n    fatherName: 'Paschasius van Hecke',\n    motherName: 'Martijntken Beelaert',\n    slug: 'anna-van-hecke-1607',\n  },\n  {\n    name: 'Maria Sturm',\n    sex: 'f',\n    born: 1835,\n    died: 1917,\n    fatherName: 'Charles Sturm',\n    motherName: 'Seraphina Spelier',\n    slug: 'maria-sturm-1835',\n  },\n  {\n    name: 'Jacobus Bernardus van Brussel',\n    sex: 'm',\n    born: 1736,\n    died: 1809,\n    fatherName: 'Jan van Brussel',\n    motherName: 'Elisabeth Haverbeke',\n    slug: 'jacobus-bernardus-van-brussel-1736',\n  },\n];\n","/* eslint-disable  @typescript-eslint/no-explicit-any */\nimport React, { useCallback, useState } from 'react';\nimport './App.scss';\nimport { PostList } from './components/PostList';\nimport { peopleFromServer } from './data/people';\nimport { Person } from './types/Person';\n\nfunction debounce(callback: any, delay: number) {\n  let timerId = 0;\n\n  return (...args: any) => {\n    window.clearTimeout(timerId);\n    timerId = window.setTimeout(() => {\n      callback(...args);\n    }, delay);\n  };\n}\n\ninterface FilterParams {\n  appliedQuery: string;\n}\n\nfunction getPreparedPeople(\n  people: Person[],\n  {\n    appliedQuery,\n  }: FilterParams,\n) {\n  let preparedPosts = [...people];\n\n  const filt = (item: string) => item.toLowerCase().includes(appliedQuery);\n\n  preparedPosts = preparedPosts.filter(person => filt(person.name));\n\n  return preparedPosts;\n}\n\nexport const App: React.FC = () => {\n  const [targetValue, setTargetValue] = useState('');\n  const [selectedPerson, setSelectedPerson] = useState<Person | null>(null);\n  const [appliedQuery, setAppliedQuery] = useState('');\n  const [isListVisible, setIsListVisible] = useState(false);\n\n  const applyQuery = useCallback(\n    debounce(setAppliedQuery, 1000),\n    [],\n  );\n\n  const title = selectedPerson\n    ? `${selectedPerson.name} (${selectedPerson.born} - ${selectedPerson.died})`\n    : 'no selected person';\n\n  const onSelected = (person: Person) => {\n    const curPerson = peopleFromServer.find(body => body.name === person.name)\n    || null;\n\n    setTargetValue(curPerson?.name || '');\n    setSelectedPerson(curPerson);\n    setIsListVisible(false);\n  };\n\n  const handler = (value: string) => {\n    setTargetValue(value);\n    applyQuery(value.toLowerCase());\n  };\n\n  const visiblePeople = appliedQuery\n    ? getPreparedPeople(peopleFromServer, { appliedQuery })\n    : peopleFromServer;\n\n  return (\n    <main className=\"section\">\n      <h1 className=\"title\">\n        {title}\n      </h1>\n\n      <div className=\"dropdown is-active\">\n        <div className=\"dropdown-trigger\">\n          <input\n            type=\"text\"\n            required\n            placeholder=\"Enter a part of the name\"\n            className=\"input\"\n            value={targetValue}\n            onChange={event => handler(event.target.value)}\n            onFocus={() => setIsListVisible(true)}\n          />\n        </div>\n\n        <div className=\"dropdown-menu\" role=\"menu\">\n          {isListVisible\n            && <PostList people={visiblePeople} selectedBody={onSelected} />}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}